/*!
@defgroup scg System Clock Generator (SCG)
@details The SDK provides driver for the System Clock Generator (SCG) module of Kinetis devices.

# Function discription {#SCGFunc}

The SCG module contains the a system PLL (SPLL), a slow internal reference clock (SIRC),
a fast internal reference clock (FIRC), and the system oscillator clock (SOSC). They
could be configured separately as the source of MCU system clocks. Accordingly,
the SCG driver provides such functions:

- MCU system clock configuration.
- SCG SOSC configuration.
- SCG SIRC configuration.
- SCG FIRC configuration.
- SCG SPLL configuration.

## MCU System Clock {#SCGSYSClk}

MCU system clock configurations include the clock source selection and the clock
dividers. The configurations for VLPR, RUN and HSRUN modes are set separately,
using CLOCK_SetVlprModeSysClkConfig() CLOCK_SetRunModeSysClkConfig() and
CLOCK_SetHsrunModeSysClkConfig() to configure the MCU system clock.\n

Current MCU system clock configuration could be got by function CLOCK_GetCurSysClkConfig().
Current MCU system clock frequency could be got by CLOCK_GetSysClkFreq().

## SCG System OSC Clock {#SCGSOSC}

The functions CLOCK_InitSysOsc()/CLOCK_DeinitSysOsc() are used for SOSC clock
initialization. The function CLOCK_InitSysOsc disables the SOSC internally and
re-configure it, so make sure the SOSC is not used while calling these functions.\n

SOSC clock could be used directly as the MCU system clock source. SOSCDIV1_CLK,
SOSCDIV2_CLK and SOSCDIV3_CLK could be used as the peripheral clock source. These
clocks' frequency could be got by functions CLOCK_GetSysOscFreq() and
CLOCK_GetSysOscAsyncFreq().\n

To configure SOSC monitor mode, use the function CLOCK_SetSysOscMonitorMode(),
the clock error status could be got and cleared by CLOCK_IsSysOscErr() and
CLOCK_ClearSysOscErr().\n

## SCG Slow IRC Clock {#SCGSIRC}

The functions CLOCK_InitSirc()/CLOCK_DeinitSirc() are used for SIRC clock
initialization. The function CLOCK_InitSirc disables the SIRC internally and
re-configure it, so make sure the SIRC is not used while calling these functions.\n

SIRC clock could be used directly as the MCU system clock source. SIRCDIV1_CLK,
SIRCDIV2_CLK and SIRCDIV3_CLK could be used as the peripheral clock source. These
clocks' frequency could be got by functions CLOCK_GetSircFreq() and
CLOCK_GetSircAsyncFreq().\n

## SCG Fast IRC Clock {#SCGFIRC}

The functions CLOCK_InitFirc()/CLOCK_DeinitFirc() are used for FIRC clock
initialization. The function CLOCK_InitFirc disables the FIRC internally and
re-configure it, so make sure the FIRC is not used while calling these functions.\n

FIRC clock could be used directly as the MCU system clock source. FIRCDIV1_CLK,
FIRCDIV2_CLK and FIRCDIV3_CLK could be used as the peripheral clock source. These
clocks' frequency could be got by functions CLOCK_GetFircFreq() and
CLOCK_GetFircAsyncFreq().\n

FIRC could be trimed by external clock, see the section "Typical use case" for
how to enable FIRC trim.

## SCG System PLL Clock {#SCGSPLL}

The functions CLOCK_InitSysPll()/CLOCK_DeinitSysPll() are used for SPLL clock
initialization. The function CLOCK_InitSysPll disables the SPLL internally and
re-configure it, so make sure the SPLL is not used while calling these functions.\n

To generate the desired SPLL frequency, PREDIV and MULT value must be set properly
durint initialize SPLL. The function CLOCK_GetSysPllMultDiv() could help to calculate
the PREDIV and MULT. Passing in the reference clock frequency and desired output
frequency, this function returns the PREDIV and MULT which generate the frequency
closest to desired frequency.

The SPLL is based on FIRC or SOSC, so the FIRC or SOSC must be enabled first before
SPLL initialization. Also, when re-configure FIRC or SOSC, be careful with the
SPLL.\n

SPLL clock could be used directly as the MCU system clock source. SPLLDIV1_CLK,
SPLLDIV2_CLK and SPLLDIV3_CLK could be used as the peripheral clock source. These
clocks' frequency could be got by functions CLOCK_GetSysPllFreq() and
CLOCK_GetSysPllAsyncFreq().\n

To configure SPLL monitor mode, use the function CLOCK_SetSysPllMonitorMode(),
the clock error status could be got and cleared by CLOCK_IsSysPllErr() and
CLOCK_ClearSysPllErr().\n

## SCG clock valid check {#SCGCLKVld}

The functions such as CLOCK_IsFircValid() are used to check whether specific
clock is valid or not. Please see "Typical use case" for details.\n

The clocks are valid after the initialize functions such as CLOCK_InitFirc(), so
not necessary to call CLOCK_IsFircValid() after CLOCK_InitFirc().

# Typical use case {#SCGUSECse}

## FIRC clock trim {#SCGFIRCTrim}

During FIRC initialization, applications could choose enable trim or not.

1. Don't enable trim.

~~~~~{.c}

    /* FIRC configuration. */
    scg_firc_config_t fircConfig =
    {
        .enableMode = kSCG_FircEnable | kSCG_FircDisableRegulator,

        .div1       = kSCG_AsyncClkDisable,
        .div2       = kSCG_AsyncClkDisable,
        .div3       = kSCG_AsyncClkDisable,

        .range      = kSCG_FircRange48M,

        .trimConfig = NULL /* Don't enable trim.
    };

    /* Initialize the FIRC. */
    CLOCK_InitFirc(&fircConfig);

~~~~~

2. Enable trim.

~~~~~{.c}

    /* FIRC trim configuration. */
    scg_firc_trim_config_t fircTrimConfig =
    {
        .trimMode = kSCG_FircTrimUpdate,

        .trimSrc = kSCG_FircTrimSrcUsb0,
        .trimDiv = kSCG_FircTrimDivBy1, /* If not use SOSC as trim source, trimDiv is ignored. */

        .trimCoar = 0U, /* In the mode kSCG_FircTrimUpdate, trimCoar is ignored. */
        .trimFine = 0U, /* In the mode kSCG_FircTrimUpdate, trimFine is ignored. */
    };

    /* FIRC configuration. */
    scg_firc_config_t fircConfig =
    {
        .enableMode = kSCG_FircEnable | kSCG_FircDisableRegulator,

        .div1       = kSCG_AsyncClkDisable,
        .div2       = kSCG_AsyncClkDisable,
        .div3       = kSCG_AsyncClkDisable,

        .range      = kSCG_FircRange48M,

        .trimConfig = &fircTrimConfig
    };

    /* Initialize the FIRC. */
    CLOCK_InitFirc(&fircConfig);

~~~~~

## SPLL initialization {#SCGSPLLInit}

The following code shows how to setup SCG SPLL, the SPLL uses SOSC as reference
clock.

~~~~~{.c}

    #define SCG_SOSC_FREQ 8000000
    #define SCG_SPLL_FREQ 72000000

    uint32_t prediv, mult;

    /* Initialize the SOSC. */
    scg_sosc_config_t soscConfig =
    {
        .freq = SCG_SOSC_FREQ,
        ..., // Other settings.
    };

    CLOCK_InitSysOsc(&soscConfig);

    /* Optional, get the proper PREDIV and MULT value. */
    if (0U == CLOCK_GetSysPllMultDiv(SCG_SOSC_FREQ, SCG_SPLL_FREQ, &mult, &prediv))
    {
        /* The calculate function returns 0, so could not find proper MULT, PREDIV. */
        return ERROR;
    }

    scg_spll_config_t spllConfig =
    {
        .mult   = mult,
        .prediv = prediv,
        ..., // Other settings.
    };
    CLOCK_InitSysPll(&spllConfig);

~~~~~

## System clock configuration {#SCGSYSCLKCfg}

While changing the system clock configuration, the actual system clock does not
change until the target clock source is valid. So please make sure the
clock source is valid before using it. The functions such as CLOCK_IsSircValid()
are used for this purpose.\n

SCG has dedicate system clock configure registers for VLPR, RUN and HSRUN modes.
During power mode change, the system clock configuration may change too. In this
case, need to check clock source valid while power mode change.\n

In the following example, SIRC is used as system clock source in VLPR mode, FIRC is
used as system clock source in RUN mode, SPLL is used as system clock source in
HSRUN mode.\n

The example workflow:

1. SIRC, FIRC and SPLL are all enabled in RUN mode.
2. MCU enters VLPR mode. In VLPR mode, FIRC and SPLL are disabled automatically.
3. MCU enters RUN mode. Here should wait FIRC valid.
4. MCU enters HSRUN mode. In step 3, the SPLL is already enabled, but may not valid,
   so need to wait for it valid when enter HSRUN mode.

~~~~~{.c}

    /* Enable clocks. */
    CLOCK_SysInitSirc(...);
    CLOCK_SysInitFirc(...);
    CLOCK_SysInitSysPll(...);

    /* Set system clock configuration for different power mode. */
    CLOCK_SetRunModeSysClkConfig(...);
    CLOCK_SetVlprModeSysClkConfig(...);
    CLOCK_SetHsrunModeSysClkConfig(...);

    /* Enter VLPR mode. */
    // ...

    /* Enter RUN mode. */
    // ...
    /* Wait for FIRC valid. */
    while (!CLOCK_IsFircValid()) { }

    /* Enter HSRUN mode. */
    /* Wait for SYSPLL valid. */
    while (!CLOCK_IsSysPllValid()) { }
    // ...

~~~~~

*/
