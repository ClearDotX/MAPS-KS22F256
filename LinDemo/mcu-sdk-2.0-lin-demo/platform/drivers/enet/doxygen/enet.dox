/*!
@defgroup enet Ethernet MAC (ENET)
@details The kinetis SDK provides Peripheral driver for the Ethernet MAC (ENET)
         module of Kinetis devices.
@{
*/
/*!
@defgroup enet_driver ENET Peripheral driver
@ingroup enet
@details This section describes the programming interface of the ENET Peripheral driver.
The ENET driver configures ENET module, provide functional interface and transactional 
interface for user

# Function groups{#ENETFunGrps}

## ENET Initialization and De-initialization {#ENETInitReset}

This function group initialize default configuration structure for ENET, initialize ENET with the   
user configuration, reset ENET module and de-initialize ENET module.

## ENET MII interface Operation {#ENETMIIInterOps}

This function group setup the MII and serial management SMI interface, Get data from SMI interface,
and start SMI read and write command.

## ENET Basic Operation {#ENETBasicOps}

This function group active rx, set and get MAC address, enable/disable/get/clear interrupt,
enable/disable sleep mode, add/leave multicast group and get the accelerator functions. 

## ENET Transfer Operation {#ENETTransOps}

This function group transmit/receive a frame, get the receive frame size, get the error statistics
of the transmit/receive frame, the irq handler of the tx/rx/error event.

## ENET PTP 1588 Feature Operation {#ENETPTP1588FeatureOps}

This function group configure the PTP 1588 feature, start/stop/get/set/adjust PTP 1588 timer,
get rx/tx frame timestamp, PTP 1588 timer channel feature setting.


# Typical use case {#ENETTpyUC}

## ENET Initialize, Receive and Transmit Operation {#ENETInitRxTxOps}
For ENET_ENHANCEDBUFFERDESCRIPTOR_MODE not defined case,
user only use legacy type buffer descriptor to do simple transmit/receive frame:
~~~~~{.c}
    enet_config_t config;
    uint32_t length = 0;
    uint32_t sysClock;
    uint32_t phyAddr = 0;
    bool link = false;
    phy_speed_t speed;
    phy_duplex_t duplex;
    enet_status_t result;
    enet_data_error_stats_t eErrorStatic;
    /* prepare the buffer configuration. */
    enet_buffer_config_t buffCfg = 
    {
        ENET_RXBD_NUM,
        ENET_TXBD_NUM,
        ENET_BuffSizeAlign(ENET_RXBUFF_SIZE),
        ENET_BuffSizeAlign(ENET_TXBUFF_SIZE),
        &RxBuffDescrip[0],  /* Prepare buffers */
        &TxBuffDescrip[0],  /* Prepare buffers */
        &RxDataBuff[0][0],  /* Prepare buffers */
        &TxDataBuff[0][0],  /* Prepare buffers */
    };

    sysClock = CLOCK_GetFreq(kCLOCK_CoreSysClk);

    /* Get default configuration. */
    ENET_GetDefaultConfig(&config);
    PHY_Init(EXAMPLE_ENET, 0, kPHY_AutoNegotiate, sysClock);
    /* Change the link status to PHY auto-negotiated link status. */
    PHY_GetLinkStatus(EXAMPLE_ENET, phyAddr, &link);
    if (link)
    {
        PHY_GetLinkSpeedDuplex(EXAMPLE_ENET, phyAddr, &speed, &duplex);
        config.miiSpeed = (enet_mii_speed_t)speed;
        config.miiDuplex = (enet_mii_duplex_t)duplex;
    }
    ENET_CreateHandle(EXAMPLE_ENET, &handle);
    ENET_Init(&handle, &config, &buffCfg, &macAddr[0], sysClock);
    ENET_ActiveRead(EXAMPLE_ENET);

    while (1)
    {
        // Get the Frame size
        result = ENET_GetRxFrameSize(&handle, &length);
        // Call ENET_ReadFrame when there is a received frame.
        if (length != 0)
        {
            /* Received valid frame. Deliver the rx buffer with the size equal to length. */
            uint8_t *data = (uint8_t *)malloc(length);
            ENET_ReadFrame(&handle, data, length);
            /* delivery the data to upper layer. */
            .........
            free(data);
        }
        else if (result == kStatus_ENET_RxFrameErr)
        {  
           /* Update the received buffer when error happened. */ 
           ENET_GetRxErrBeforeReadFrame(&handle, &eErrStatic);
           // update the receive buffer.
           ENET_ReadFrame(&handle, NULL, 0);
        }

       /* Send a multicast frame when the PHY is link up. */
       if(kStatus_PHY_Success == PHY_GetLinkStatus(EXAMPLE_ENET, phyAddr, &link))
       {
          if(link)
          {
             ENET_SendFrame(&handle, &frame[0], ENET_DATA_LENGTH)ï¼›
          }
      } 
  }        
~~~~~

For ENET_ENHANCEDBUFFERDESCRIPTOR_MODE defined case, the PTP 1588 configure
need to be added to enabled the PTP 1588 feature. The Initialize will be do as follow:
~~~~~{.c}
    enet_config_t config;
    uint32_t length = 0;
    uint32_t sysClock;
    uint32_t phyAddr = 0;
    bool link = false;
    phy_speed_t speed;
    phy_duplex_t duplex;
    enet_status_t result;
    enet_data_err_stats_t eErrStatic;
    /* prepare the buffer configuration. */
    enet_buffer_config_t buffCfg = 
    {
        ENET_RXBD_NUM,
        ENET_TXBD_NUM,
        ENET_BuffSizeAlign(ENET_RXBUFF_SIZE),
        ENET_BuffSizeAlign(ENET_TXBUFF_SIZE),
        &RxBuffDescrip[0],  /* Prepare buffers */
        &TxBuffDescrip[0],  /* Prepare buffers */
        &RxDataBuff[0][0],  /* Prepare buffers */
        &TxDataBuff[0][0],  /* Prepare buffers */
    };

    sysClock = CLOCK_GetFreq(kCLOCK_CoreSysClk);

    /* Set PTP 1588 source. */
    CLOCK_SetEnetTime0Clock(2);
    ptpClock = CLOCK_GetFreq(kCLOCK_Osc0ErClk);
    /* Prepare the PTP configure */
    enet_ptp_config_t ptpConfig = 
    {
        ENET_RXBD_NUM,
        ENET_TXBD_NUM,
        &g_rxPtpTsBuff[0],
        &g_txPtpTsBuff[0],
        kENET_PtpTimerChannel1,
        ptpClock,
    };

    /* Get default configuration. */
    ENET_GetDefaultConfig(&config);

    PHY_Init(EXAMPLE_ENET, 0, kPHY_AutoNegotiate, sysClock);
    /* Change the link status to PHY auto-negotiated link status. */
    PHY_GetLinkStatus(EXAMPLE_ENET, phyAddr, &link);
    if (link)
    {
        PHY_GetLinkSpeedDuplex(EXAMPLE_ENET, phyAddr, &speed, &duplex);
        config.miiSpeed = (enet_mii_speed_t)speed;
        config.miiDuplex = (enet_mii_duplex_t)duplex;
    }

    ENET_CreateHandle(EXAMPLE_ENET, &handle);
    ENET_Init(&handle, &config, &buffCfg, &macAddr[0], sysClock);
    /* Configure PTP 1588 feature. */
    ENET_Ptp1588Configure(&handle, &ptpConfig);
    /* Add the device to the PTP multicast group. */
    ENET_AddMulticastGroup(EXAMPLE_ENET, &mGAddr[0]);

    ENET_ActiveRead(EXAMPLE_ENET);
~~~~~




*/
/*! @} */
