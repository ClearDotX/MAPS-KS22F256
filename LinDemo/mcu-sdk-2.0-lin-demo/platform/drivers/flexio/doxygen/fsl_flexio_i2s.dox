/*!
@defgroup flexio_i2s Flexible I/O I2S (FLEXIO I2S)
@details The SDK provides driver for I2S function using Flexible I/O
         module of Kinetis devices.

# Overview {#FELXIO_I2SOvw}

  FELXIO I2S driver includes 2 parts: functional APIs and transactional APIs.

  Functional APIs are feature/property target low level APIs. User can use
functional APIs for FELXIO I2S initialization/configuration/operation for
optimization/custumization purpose. Using the functional API require user get
konwledge of the FELXIO I2S peripheral and know how to organize functional APIs to
meet the requirement of application. All functional API use the peripheral base
address as the first parameter. FELXIO I2S functional operation groups provide the
functional APIs set.

  Transactional APIs are transaction target high level APIs. User can use the
transactional API to enable the peripheral quickly and can also use in the
application if the code size and performance of transactional APIs can satisfy
requirement. If the code size and performance are critical requirement, user can
refer to the transactional API implementation and write their own code. All
transactional APIs use the sai_handle_t as the first parameter and user need to
initialize the handle by calling FELXIO_I2S_TxCreateHandle() or FELXIO_I2S_RxCreateHandle() API.

  Transactional APIs support asynchronized transfer. It means, the functions
FELXIO_I2S_SendNonBlocking() and FELXIO_I2S_ReceiveNonBlocking() setup interrupt for data
transfer, when the transfer complete, upper layer is notified through callback
function with status kStatus_FELXIO_I2S_TxIdle and kStatus_FELXIO_I2S_RxIdle.

# Function groups {#FELXIO_I2SFunc}

## Initialization and deinitialization {#FELXIO_I2SInit}

  The function FELXIO_I2S_TxInit() and FELXIO_I2S_RxInit() initializes FELXIO I2S Tx or Rx with specified configurations, the function
FELXIO_I2S_TxGetDefaultConfig() and FELXIO_I2S_RxGetDefaultConfig() could help to get the default configurations.

## Status {#FELXIO_I2SStatus}

  Provide functions to get and clear the FELXIO I2S status.

## Interrupt {#FELXIO_I2SInterrupt}

  Provide functions to enable/disable FELXIO I2S interrupts.

## DMA Control {#FELXIO_I2SDmaCtrl}

  Provide functions to enable/disable FELXIO I2S to generate DMA request for different flags.

## Bus Operations {#FELXIO_I2SBusOperation}

  Provide functions to enable/disable TX/RX and functions to write/read data. And also functions to set
  audio format.

## Transactional {#FELXIO_I2STrans}

  Provide functions to send/receive data through interrupt or DMA.

# Typical use case {#FELXIO_I2SCase}

## FELXIO I2S Send/Receive in interrupt way {#FELXIO_I2SCaseInterrupt}

~~~~~{.c}
    sai_handle_t g_saiTxHandle;
    sai_config_t user_config;
    sai_transfer_t sendXfer;
    volatile bool txFinished;
    volatile bool rxFinished;
    const uint8_t sendData[] = [......];

    void FELXIO_I2S_UserCallback(sai_handle_t *handle, status_t status, void *userData)
    {
        userData = userData;

        if (kStatus_FELXIO_I2S_TxIdle == status)
        {
            txFinished = true;
        }
    }

    void main(void)
    {
        //...

        FELXIO_I2S_TxGetDefaultConfig(&user_config);

        FELXIO_I2S_TxInit(FELXIO I2S0, &user_config);
        FELXIO_I2S_TxCreateHandle(FELXIO I2S0, &g_saiHandle);
        FELXIO_I2S_TxSetTransferCallback(&g_saiHandle, FELXIO_I2S_UserCallback, NULL);

        //Configure sai format
        FELXIO_I2S_TxSetTransferFormat(FELXIO I2S0, &g_saiHandle, mclkSource, mclk);

        // Prepare to send.
        sendXfer.data = sendData
        sendXfer.dataSize = sizeof(sendData)/sizeof(sendData[0]);
        txFinished = false;

        // Send out.
        FELXIO_I2S_SendNonBlocking(FELXIO I2S0, &g_saiHandle, &sendXfer);

        // Wait send finished.
        while (!txFinished)
        {
        }

        // ...
    }
~~~~~

## FELXIO_I2S Send/Receive in DMA way {#FELXIO_I2SCaseDma}

~~~~~{.c}
    sai_handle_t g_saiHandle;
    dma_handle_t g_saiTxDmaHandle;
    dma_handle_t g_saiRxDmaHandle;
    sai_config_t user_config;
    sai_transfer_t sendXfer;
    volatile bool txFinished;
    uint8_t sendData[] = ...;

    void FELXIO_I2S_UserCallback(sai_handle_t *handle, status_t status, void *userData)
    {
        userData = userData;

        if (kStatus_FELXIO_I2S_TxIdle == status)
        {
            txFinished = true;
        }
    }

    void main(void)
    {
        //...

        FELXIO_I2S_TxGetDefaultConfig(&user_config);
        FELXIO_I2S_TxInit(FELXIO I2S0, &user_config);

        // Setup the DMA
        DMAMUX_Init(DMAMUX0);
        DMAMUX_SetSource(DMAMUX0, FELXIO_I2S_TX_DMA_CHANNEL, FELXIO_I2S_TX_DMA_REQUEST);
        DMAMUX_EnableChannel(DMAMUX0, FELXIO_I2S_TX_DMA_CHANNEL);

        DMA_Init(DMA0);

        /* Create DMA handle. */
        DMA_CreateHandle(&g_saiTxDmaHandle, DMA0, FELXIO_I2S_TX_DMA_CHANNEL);

        FELXIO_I2S_CreateHandleDMA(FELXIO I2S0, &g_saiTxDmaHandle);
        FELXIO_I2S_SetTransferCallbackDMA(&g_saiDmaHandle, FELXIO_I2S_UserCallback, NULL);

        // Prepare to send.
        sendXfer.data = sendData
        sendXfer.dataSize = sizeof(sendData)/sizeof(sendData[0]);
        txFinished = false;

        // Send out.
        FELXIO_I2S_SendDMA(&g_saiHandle, &sendXfer);

        // Wait send finished.
        while (!txFinished)
        {
        }

        // ...
    }
~~~~~

*/
