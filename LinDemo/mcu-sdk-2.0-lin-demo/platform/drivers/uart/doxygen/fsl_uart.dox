/*!
@defgroup uart Universal Asynchronous Receiver/Transmitter (UART)
@details The SDK provides driver for the Universal Asynchronous Receiver/Transmitter (UART)
         module of Kinetis devices.

# Overview {#UARTOvw}

  UART driver includes 2 parts: functional APIs and transactional APIs.

  Functional APIs are feature/property target low level APIs. User can use
functional APIs for UART initialization/configuration/operation for
optimization/custumization purpose. Using the functional API require user get
konwledge of the UART peripheral and know how to organize functional APIs to
meet the requirement of application. All functional API use the peripheral base
address as the first parameter. UART functional operation groups provide the
functional APIs set.

  Transactional APIs are transaction target high level APIs. User can use the
transactional API to enable the peripheral quickly and can also use in the
application if the code size and performance of transactional APIs can satisfy
requirement. If the code size and performance are critical requirement, user can
refer to the transactional API implementation and write their own code. All
transactional APIs use the uart_handle_t as the first parameter and user need to
initialize the handle by calling UART_CreateHandle() API.

  Transactional APIs support asynchronized transfer. It means, the functions
UART_SendNonBlocking() and UART_ReceiveNonBlocking() setup interrupt for data
transfer, when the transfer complete, upper layer is notified through callback
function with status kStatus_UART_TxIdle and kStatus_UART_RxIdle.

  Transactional receive APIs support the ring buffer. User should prepare the
memory for ring buffer and pass in the start address and size while calling
UART_CreateHandle(). If pass in NULL, the ring buffer feature is disabled.
When ring buffer enabled, the received data is saved to ring buffer in background,
the function UART_ReceiveNonBlocking() first gets data from the ring buffer, if
ring buffer does not have enough data, the function first returns the data in
ring buffer and then saves received data to user memory, when all data received,
upper layer is informed through callback with status kStatus_UART_RxIdle.

  If RX ring buffer is full, upper layer is informed through callback with status
kStatus_UART_RxRingBufferOverrun. In the callback function, upper layer could read
data out from ring buffer. If not, the oldest data will be override by the new data.

  The ring buffer size is specified when creating handle. Please pay attention to
the size, one bytes is reserved for ring buffer maintinance. In other words, if
create handle using like this:

~~~~~{.c}
    UART_CreateHandle(&handle, UART0, &ringBuffer, 32);
~~~~~

  In this example, the buffer size is 32, but actually only 31 bytes are used for
saving data.

# Function groups {#UARTFunc}

## Initialization and deinitialization {#UARTInit}

  The function UART_Init() initializes UART with specified configurations, the function
UART_GetDefaultConfig() could help to get the default configurations.

## Status {#UARTStatus}

  Provide functions to get and clear the UART status.

## Interrupt {#UARTInterrupt}

  Provide functions to enable/disable UART interrupts and get current enabled interrupts.

## DMA Control {#UARTDmaCtrl}

  Provide functions to enable/disable UART to generate DMA request.

## Bus Operations {#UARTBusOperation}

  Provide functions to enable/disable TX/RX and functions to write/read data.

## Transactional {#UARTTrans}

  Provide functions to send/receive data through interrupt or DMA.

# Typical use case {#UARTCase}

## UART Send/Receive in polling way {#UARTCasePolling}

~~~~~{.c}
    uint8_t ch;
    UART_GetDefaultConfig(&user_config);
    user_config.baudRate_Bps = 115200U;
    user_config.enableTx = true;
    user_config.enableRx = true;

    UART_Init(UART1,&user_config,120000000U);

    UART_WriteData(UART1, txbuff, sizeof(txbuff));

    while(1)
    {
        UART_ReadBlocking(UART1, &ch, 1);
        UART_WriteBlocking(UART1, &ch, 1);
    }
~~~~~

## UART Send/Receive in interrupt way {#UARTCaseInterrupt}

~~~~~{.c}
    uart_handle_t g_uartHandle;
    uart_config_t user_config;
    uart_transfer_t sendXfer;
    uart_transfer_t receiveXfer;
    volatile bool txFinished;
    volatile bool rxFinished;
    uint8_t sendData[] = ['H', 'e', 'l', 'l', 'o'];
    uint8_t receiveData[32];

    void UART_UserCallback(uart_handle_t *handle, status_t status, void *userData)
    {
        userData = userData;

        if (kStatus_UART_TxIdle == status)
        {
            txFinished = true;
        }

        if (kStatus_UART_RxIdle == status)
        {
            rxFinished = true;
        }
    }

    void main(void)
    {
        //...

        UART_GetDefaultConfig(&user_config);
        user_config.baudRate_Bps = 115200U;
        user_config.enableTx = true;
        user_config.enableRx = true;

        UART_Init(UART1, &user_config, 120000000U);
        UART_CreateHandle(&g_uartHandle, UART1, NULL, 0);
        UART_SetTransferCallback(&g_uartHandle, UART_UserCallback, NULL);

        // Prepare to send.
        sendXfer.data = sendData
        sendXfer.dataSize = sizeof(sendData)/sizeof(sendData[0]);
        txFinished = false;

        // Send out.
        UART_SendNonBlocking(&g_uartHandle, &sendXfer);

        // Wait send finished.
        while (!txFinished)
        {
        }

        // Prepare to receive.
        receiveXfer.data = receiveData;
        receiveXfer.dataSize = sizeof(receiveData)/sizeof(receiveData[0]);
        rxFinished = false;

        // Receive.
        UART_ReceiveNonBlocking(&g_uartHandle, &receiveXfer, NULL);

        // Wait receive finished.
        while (!rxFinished)
        {
        }

        // ...
    }
~~~~~

## UART Receive using the ringbuffer feature {#UARTCaseRing}

~~~~~{.c}
    #define RING_BUFFER_SIZE 64
    #define RX_DATA_SIZE     32

    uart_handle_t g_uartHandle;
    uart_config_t user_config;
    uart_transfer_t sendXfer;
    uart_transfer_t receiveXfer;
    volatile bool txFinished;
    volatile bool rxFinished;
    uint8_t receiveData[RX_DATA_SIZE];
    uint8_t ringBuffer[RING_BUFFER_SIZE];

    void UART_UserCallback(uart_handle_t *handle, status_t status, void *userData)
    {
        userData = userData;

        if (kStatus_UART_RxIdle == status)
        {
            rxFinished = true;
        }
    }

    void main(void)
    {
        size_t bytesRead;
        //...

        UART_GetDefaultConfig(&user_config);
        user_config.baudRate_Bps = 115200U;
        user_config.enableTx = true;
        user_config.enableRx = true;

        UART_Init(UART1, &user_config, 120000000U);
        UART_CreateHandle(&g_uartHandle, UART1, &ringBuffer, RING_BUFFER_SIZE);
        UART_SetTransferCallback(&g_uartHandle, UART_UserCallback, NULL);

        // Now the RX is working in background, receive in to ring buffer.

        // Prepare to receive.
        receiveXfer.data = receiveData;
        receiveXfer.dataSize = RX_DATA_SIZE;
        rxFinished = false;

        // Receive.
        UART_ReceiveNonBlocking(&g_uartHandle, &receiveXfer, &bytesRead);

        if (bytesRead = RX_DATA_SIZE) /* Have read enough data. */
        {
            ;
        }
        else
        {
            if (bytesRead) /* Received some data, process first. */
            {
                ;
            }

            // Wait receive finished.
            while (!rxFinished)
            {
            }
        }

        // ...
    }
~~~~~

## UART Send/Receive in DMA way {#UARTCaseDma}

~~~~~{.c}
    uart_handle_t g_uartHandle;
    dma_handle_t g_uartTxDmaHandle;
    dma_handle_t g_uartRxDmaHandle;
    uart_config_t user_config;
    uart_transfer_t sendXfer;
    uart_transfer_t receiveXfer;
    volatile bool txFinished;
    volatile bool rxFinished;
    uint8_t sendData[] = ['H', 'e', 'l', 'l', 'o'];
    uint8_t receiveData[32];

    void UART_UserCallback(uart_handle_t *handle, status_t status, void *userData)
    {
        userData = userData;

        if (kStatus_UART_TxIdle == status)
        {
            txFinished = true;
        }

        if (kStatus_UART_RxIdle == status)
        {
            rxFinished = true;
        }
    }

    void main(void)
    {
        //...

        UART_GetDefaultConfig(&user_config);
        user_config.baudRate_Bps = 115200U;
        user_config.enableTx = true;
        user_config.enableRx = true;

        UART_Init(UART1, &user_config, 120000000U);

        // Setup the DMA
        DMAMUX_Init(DMAMUX0);
        DMAMUX_SetSource(DMAMUX0, UART_TX_DMA_CHANNEL, UART_TX_DMA_REQUEST);
        DMAMUX_EnableChannel(DMAMUX0, UART_TX_DMA_CHANNEL);
        DMAMUX_SetSource(DMAMUX0, UART_RX_DMA_CHANNEL, UART_RX_DMA_REQUEST);
        DMAMUX_EnableChannel(DMAMUX0, UART_RX_DMA_CHANNEL);

        DMA_Init(DMA0);

        /* Create DMA handle. */
        DMA_CreateHandle(&g_uartTxDmaHandle, DMA0, UART_TX_DMA_CHANNEL);
        DMA_CreateHandle(&g_uartRxDmaHandle, DMA0, UART_RX_DMA_CHANNEL);

        UART_CreateHandleDMA(&g_uartHandle, UART1, &g_uartTxDmaHandle, &g_uartRxDmaHandle);
        UART_SetTransferCallbackDMA(&g_uartDmaHandle, UART_UserCallback, NULL);

        // Prepare to send.
        sendXfer.data = sendData
        sendXfer.dataSize = sizeof(sendData)/sizeof(sendData[0]);
        txFinished = false;

        // Send out.
        UART_SendDMA(&g_uartHandle, &sendXfer);

        // Wait send finished.
        while (!txFinished)
        {
        }

        // Prepare to receive.
        receiveXfer.data = receiveData;
        receiveXfer.dataSize = sizeof(receiveData)/sizeof(receiveData[0]);
        rxFinished = false;

        // Receive.
        UART_ReceiveDMA(&g_uartHandle, &receiveXfer, NULL);

        // Wait receive finished.
        while (!rxFinished)
        {
        }

        // ...
    }
~~~~~

*/
