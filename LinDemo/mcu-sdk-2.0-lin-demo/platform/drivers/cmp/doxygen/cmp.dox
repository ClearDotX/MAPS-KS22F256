/*!
@defgroup cmp Analog Comparator (CMP)
@details The SDK provides Peripheral driver for the Analog Comparator (CMP) module of Kinetis devices.
@{
*/
/*!
@defgroup cmp_driver CMP Peripheral driver
@ingroup cmp
@details This section describes the programming interface of the CMP Peripheral driver.

# Overview

CMP driver is created to help user to operate the CMP module better. This driver can be considered as a basic comparator
with advanced features. The APIs for basic comparator can make the CMP work as a general comparator, which compares the
two input channel's voltage and creates the output of the comparator result immediately. The APIs for advanced feature
can be used as the plug-in function based on the basic comparator, they can process the comparator's output with
hardware support. 

# Function groups {#CMPFunGrps}

## Initialization {#CMPInit}

This function group initializes default configuration structure for the comparator, enable/disable the CMP module,
initialize CMP module with the basic configuration, and de-initialize it. Also the function to set the input channels is
also included in this group.

## Advanced Feature {#CMPAdvFeature}

This function group configures the advanced features of CMP.

## Results {#CMPResults}

This function group is for the operations to get the comparator's status.

# Typical use case {#CMPTpyUC}

## Polling Configuration {#CMPPolConfig}

~~~~~{.c}

    int main(void)
    {
        cmp_config_t mCmpConfigStruct;
        cmp_dac_config_t mCmpDacConfigStruct;

        // ...

        // Configure the comparator.
        CMP_Init(DEMO_CMP_INSTANCE);
        CMP_GetDefaultConfig(&mCmpConfigStruct);
        CMP_Configure(DEMO_CMP_INSTANCE, &mCmpConfigStruct);

        // Configure the DAC channel.
        mCmpDacConfigStruct.referenceVoltageSource = kCMP_VrefSourceVin2; // VCC.
        mCmpDacConfigStruct.DACValue = 32U; // Half voltage of logic high level.
        CMP_SetDACConfig(DEMO_CMP_INSTANCE, &mCmpDacConfigStruct);
        CMP_SetInputChannels(DEMO_CMP_INSTANCE, DEMO_CMP_USER_CHANNEL, DEMO_CMP_DAC_CHANNEL);

        while (1)
        {
            if (0U != (kCMP_OutputAssertEventFlag & CMP_GetStatusFlags(DEMO_CMP_INSTANCE)))
            {
                // To do something.
            }
            else
            {
                // To do something.
            }
        }
    }

~~~~~

## Interrupt Configuration {#CMPIntConfig}

~~~~~{.c}

    volatile uint32_t g_CmpFlags = 0U;

    // ...

    void DEMO_CMP_IRQ_HANDLER_FUNC(void)
    {
        g_CmpFlags = CMP_GetStatusFlags(DEMO_CMP_INSTANCE);
        CMP_ClearStatusFlags(DEMO_CMP_INSTANCE, kCMP_OutputRisingEventFlag | kCMP_OutputFallingEventFlag);
        if (0U != (g_CmpFlags & kCMP_OutputRisingEventFlag))
        {
            // To do something.
        }
        else if (0U != (g_CmpFlags & kCMP_OutputFallingEventFlag))
        {
            // To do something.
        }
    }

    int main(void)
    {
        cmp_config_t mCmpConfigStruct;
        cmp_dac_config_t mCmpDacConfigStruct;

        // ...
        EnableIRQ(DEMO_CMP_IRQ_ID);        
        // ...

        // Configure the comparator.
        CMP_Init(DEMO_CMP_INSTANCE);
        CMP_GetDefaultConfig(&mCmpConfigStruct);
        CMP_Configure(DEMO_CMP_INSTANCE, &mCmpConfigStruct);

        // Configure the DAC channel.
        mCmpDacConfigStruct.referenceVoltageSource = kCMP_VrefSourceVin2; // VCC.
        mCmpDacConfigStruct.DACValue = 32U; // Half voltage of logic high level.
        CMP_SetDACConfig(DEMO_CMP_INSTANCE, &mCmpDacConfigStruct);
        CMP_SetInputChannels(DEMO_CMP_INSTANCE, DEMO_CMP_USER_CHANNEL, DEMO_CMP_DAC_CHANNEL);

        // Enable the output rising and falling interrupts.
        CMP_EnableInterrupts(DEMO_CMP_INSTANCE, kCMP_OutputRisingInterruptEnable | kCMP_OutputFallingInterruptEnable);

        while (1)
        {
        }
    }

~~~~~

*/
/*! @} */

