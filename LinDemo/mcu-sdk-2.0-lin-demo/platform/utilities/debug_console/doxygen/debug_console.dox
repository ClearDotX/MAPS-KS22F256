/*!
@defgroup debug_console Initialize the the peripheral used for debug messages
@details This section describes the programming interface of the debug console driver.

Debug console enables debug log messages to be output via the specified peripheral with
frequency of peripheral source clock, base address at the specified baud rate.
And, it will provide input and output functions to scan and print formatted data.

# Function groups {#DbgConsoleFunGrps}

## Initialization {#DbgConsoleInit}

To initialize the Debug console module, call the <span style="color:red">DbgConsole_Init()</span> function with these properly parameters.
This function automatically enables the module and the clock.

~~~~~{.c}
/*
 * @brief Initialize the the peripheral used for debug messages.
 *
 * @param baseAddr      Which address of peripheral is used to send debug messages.
 * @param baudRate      The desired baud rate in bits per second.
 * @param device        Low level device type for the debug console, could be one of:
 *                      @arg DEBUG_CONSOLE_DEVICE_TYPE_UART,
 *                      @arg DEBUG_CONSOLE_DEVICE_TYPE_LPUART,
 *                      @arg DEBUG_CONSOLE_DEVICE_TYPE_LPSCI,
 *                      @arg DEBUG_CONSOLE_DEVICE_TYPE_USBCDC.
 * @param clkSrcFreq    Frequency of peripheral source clock.
 *
 * @return              Whether initialization was successful or not.
 */
status_t DbgConsole_Init(uint32_t baseAddr, uint32_t baudRate, uint8_t device, uint32_t clkSrcFreq)
~~~~~

Select supported debug console hardware device type, such as

~~~~~{.c}
    DEBUG_CONSOLE_DEVICE_TYPE_NONE   /*!< None peripheral                  */
    DEBUG_CONSOLE_DEVICE_TYPE_LPSCI  /*!< The type of peripheral is LPSCI  */
    DEBUG_CONSOLE_DEVICE_TYPE_UART   /*!< The type of peripheral is UART   */
    DEBUG_CONSOLE_DEVICE_TYPE_LPUART /*!< The type of peripheral is LPUART */
    DEBUG_CONSOLE_DEVICE_TYPE_USBCDC /*!< The type of peripheral is USB    */
~~~~~

Then, after the initialization was successful, stdout and stdin will be connected to the selected peripheral.
And debug console state is stored in debug_console_state_t structure, such as

~~~~~{.c}
typedef struct DebugConsoleState
{
    uint8_t                     type; /*!< Indicator telling whether the debug console is initialized. */
    void*                       base; /*!< Base of the IP register. */
    debug_console_ops_t         ops;  /*!< Operation function pointers for debug UART operations. */
} debug_console_state_t;
~~~~~

This example shows how to call the DbgConsole_Init() given the user configuration structure

~~~~~{.c}
uint32_t uartClkSrcFreq = CLOCK_GetFreq(BOARD_DEBUG_UART_CLKSRC);

DbgConsole_Init(BOARD_DEBUG_UART_BASEADDR, BOARD_DEBUG_UART_BAUDRATE, DEBUG_CONSOLE_DEVICE_TYPE_UART, uartClkSrcFreq);
~~~~~

## Advanced Feature {#DbgConsoleAdvFeature}

Debug console will provide input and output functions to scan and print formatted data.

+ Support a format specifier for PRINTF follows this prototype
<span style="color:red">" %[flags][width][.precision][length]specifier"</span>, which is explained below

<div style="width:800px;">
    <table>
        <tr>
            <th>flags</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>-</td>
            <td>Left-justify within the given field width; Right justification is the default</td>
        </tr>
        <tr>
            <td>+</td>
            <td>Forces to precede the result with a plus or minus sign (+ or -) even for positive numbers.
                By default, only negative numbers are preceded with a - sign.
            </td>
        </tr>
        <tr>
            <td>(space)</td>
            <td>If no sign is going to be written, a blank space is inserted before the value.</td>
        </tr>
        <tr>
            <td>#</td>
            <td>Used with o, x or X specifiers the value is preceded with 0, 0x or 0X respectively for
                values different than zero. Used with e, E and f, it forces the written output to
                contain a decimal point even if no digits would follow. By default, if no digits follow,
                no decimal point is written. Used with g or G the result is the same as with e or E
                but trailing zeros are not removed.
            </td>
        </tr>
        <tr>
            <td>0</td>
            <td>Left-pads the number with zeroes (0) instead of spaces, where padding is specified
                (see width sub-specifier).
            </td>
        </tr>
    </table>
</div>

<div style="width:800px;">
    <table>
        <tr>
            <th>width</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>(number)</td>
            <td>Minimum number of characters to be printed. If the value to be printed is shorter than this number,
                the result is padded with blank spaces. The value is not truncated even if the result is larger.
            </td>
        </tr>
        <tr>
            <td>*</td>
            <td>The width is not specified in the format string, but as an additional integer value argument
                preceding the argument that has to be formatted.
            </td>
        </tr>
    </table>
</div>

<div style="width:800px;">
    <table>
        <tr>
            <th>.precision</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>.number</td>
            <td>For integer specifiers (d, i, o, u, x, X) − precision specifies the minimum number of
                digits to be written. If the value to be written is shorter than this number, the result
                is padded with leading zeros. The value is not truncated even if the result is longer.
                A precision of 0 means that no character is written for the value 0.
                For e, E and f specifiers − this is the number of digits to be printed after the decimal point.
                For g and G specifiers − This is the maximum number of significant digits to be printed.
                For s − this is the maximum number of characters to be printed.
                By default all characters are printed until the ending null character is encountered.
                For c type − it has no effect. When no precision is specified, the default is 1.
                If the period is specified without an explicit value for precision, 0 is assumed.
            </td>
        </tr>
        <tr>
            <td>.*</td>
            <td>The precision is not specified in the format string, but as an additional integer value argument
                preceding the argument that has to be formatted.
            </td>
        </tr>
    </table>
</div>

<table>
    <tr>
        <th>length</th>
        <th>Description</th>
    </tr>
    <tr>
        <td colspan=2>Do not support</td>
    </tr>
</table>

<table>
    <tr>
        <th>specifier</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>d or i</td>
        <td>Signed decimal integer</td>
    </tr>
    <tr>
        <td>f</td>
        <td>Decimal floating point</td>
    </tr>
    <tr>
        <td>F</td>
        <td>Decimal floating point capital letters</td>
    </tr>
    <tr>
        <td>x</td>
        <td>Unsigned hexadecimal integer</td>
    </tr>
    <tr>
        <td>X</td>
        <td>Unsigned hexadecimal integer capital letters</td>
    </tr>
    <tr>
        <td>o</td>
        <td>Signed octal</td>
    </tr>
    <tr>
        <td>b</td>
        <td>Binary value</td>
    </tr>
    <tr>
        <td>p</td>
        <td>Pointer address</td>
    </tr>
    <tr>
        <td>u</td>
        <td>Unsigned decimal integer</td>
    </tr>
    <tr>
        <td>c</td>
        <td>Character</td>
    </tr>
    <tr>
        <td>s</td>
        <td>String of characters</td>
    </tr>
    <tr>
        <td>n</td>
        <td>Nothing printed</td>
    </tr>
</table>

+ Support a format specifier for SCANF follows this prototype
<span style="color:red">" %[*][width][length]specifier"</span>, which is explained below

<div style="width:800px;">
    <table>
        <tr>
            <th>*</th>
            <th>Description</th>
        </tr>
        <tr>
            <td colspan=2>This is an optional starting asterisk indicates that the data is to be read
                from the stream but ignored, i.e. it is not stored in the corresponding argument.
            </td>
        </tr>
    </table>
</div>

<div style="width:800px;">
    <table>
        <tr>
            <th>width</th>
            <th>Description</th>
        </tr>
        <tr>
            <td colspan=2>This specifies the maximum number of characters to be read
                in the current reading operation.
            </td>
        </tr>
    </table>
</div>

<div style="width:800px;">
    <table>
        <tr>
            <th>length</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>hh</td>
            <td>The argument is interpreted as a signed char or unsigned char (only applies
                to integer specifiers: i, d, o, u, x and X).
            </td>
        </tr>
        <tr>
            <td>h</td>
            <td>The argument is interpreted as a short int or unsigned short int (only applies
                to integer specifiers: i, d, o, u, x and X).
            </td>
        </tr>
        <tr>
            <td>l</td>
            <td>The argument is interpreted as a long int or unsigned long int for integer
                specifiers (i, d, o, u, x and X), and as a wide character or wide character
                string for specifiers c and s.
            </td>
        </tr>
        <tr>
            <td>ll</td>
            <td>The argument is interpreted as a long long int or unsigned long long int for integer
                specifiers (i, d, o, u, x and X), and as a wide character or wide character
                string for specifiers c and s.
            </td>
        </tr>
        <tr>
            <td>L</td>
            <td>The argument is interpreted as a long double (only applies to
                floating point specifiers: e, E, f, g and G).
            </td>
        </tr>
        <tr>
            <td>j or z or t</td>
            <td>Do not support</td>
        </tr>
    </table>
</div>

<div style="width:800px;">
    <table>
        <tr>
            <th>specifier</th>
            <th>Qualifying Input</th>
            <th>Type of argument</th>
        </tr>
        <tr>
            <td>c</td>
            <td>Single character: Reads the next character. If a width different from 1 is specified,
                the function reads width characters and stores them in the successive locations of the array
                passed as argument. No null character is appended at the end.
            </td>
            <td>char *</td>
        </tr>
        <tr>
            <td>i</td>
            <td>Integer: : Number optionally preceded with a + or - sign</td>
            <td>int *</td>
        </tr>
        <tr>
            <td>d</td>
            <td>Decimal integer: Number optionally preceded with a + or - sign</td>
            <td>int *</td>
        </tr>
        <tr>
            <td>a, A, e, E, f, F, g, G</td>
            <td>Floating point: Decimal number containing a decimal point, optionally preceded by a + or - sign and
                optionally followed by the e or E character and a decimal number. Two examples of valid
                entries are -732.103 and 7.12e4
            </td>
            <td>float *</td>
        </tr>
        <tr>
            <td>o</td>
            <td>Octal Integer:</td>
            <td>int *</td>
        </tr>
        <tr>
            <td>s</td>
            <td>String of characters. This will read subsequent characters until a whitespace is found
                (whitespace characters are considered to be blank, newline and tab).
            </td>
            <td>char *</td>
        </tr>
        <tr>
            <td>u</td>
            <td>Unsigned decimal integer.</td>
            <td>unsigned int *</td>
        </tr>
    </table>
</div>

Debug console has its own printf/scanf/putchar/getchar functions which are defined in the header:

~~~~~{.c}
int DbgConsole_Printf(const char *fmt_s, ...);  /*!< Writes formatted output to the standard output stream. */
int DbgConsole_Putchar(int ch);                 /*!< Writes a character to stdout. */
int DbgConsole_Scanf(const char *fmt_ptr, ...); /*!< Reads formatted data from the standard input stream. */
int DbgConsole_Getchar(void);                   /*!< Reads a character from standard input. */
~~~~~

This utility supports selecting toolchain's printf/scanf or the SDK's printf/scanf:

~~~~~{.c}
#if SDK_DEBUGCONSOLE    /* Select printf, scanf, putchar, getchar of SDK version. */
#define PRINTF                 DbgConsole_Printf
#define SCANF                  DbgConsole_Scanf
#define PUTCHAR                DbgConsole_Putchar
#define GETCHAR                DbgConsole_Getchar
#else                   /* Select printf, scanf, putchar, getchar of toolchain. */
#define PRINTF                 printf
#define SCANF                  scanf
#define PUTCHAR                putchar
#define GETCHAR                getchar
#endif /* SDK_DEBUGCONSOLE */
~~~~~

# Typical use case {#DbgConsoleTpyUC}

## Some examples use the PUTCHAR & GETCHAR function

~~~~~{.c}
ch = GETCHAR();
PUTCHAR(ch);
~~~~~

## Some examples use the PRINTF function

Statement prints the string format

~~~~~{.c}
PRINTF("%s %s\r\n", "Hello", "world!");
~~~~~

Statement prints the hexadecimal format

~~~~~{.c}
PRINTF("0x%02X hexadecimal number equivalents 255", 255);
~~~~~

Statement prints the decimal floating point and unsigned decimal

~~~~~{.c}
PRINTF("Execution timer: %s\n\rTime: %u ticks %2.5f milliseconds\n\rDONE\n\r", "1 day", 86400, 86.4);
~~~~~

## Some examples use the SCANF function

~~~~~{.c}
PRINTF("Enter a decimal number: ");
SCANF("%d", &i);
PRINTF("\r\nYou have entered %d.\r\n", i, i);
PRINTF("Enter a hexadecimal number: ");
SCANF("%x", &i);
PRINTF("\r\nYou have entered 0x%X (%d).\r\n", i, i);
~~~~~

## Print out failure messages using SDK's __assert_func:

~~~~~{.c}
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file , line, func);
    for (;;)
    {}
}
~~~~~

*/
/*! @} */
